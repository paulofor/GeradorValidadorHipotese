<%@ jet package="jet.ionic3.page.detalhe" 
imports="java.util.* gerapp.app.* jet.wrappers.base.* jet.wrappers.base.node.* jet.wrappers.angular.* gerapp.modelo.* gerapp.modelo.node.*" 
class="DetalhePageProdBaseTs" %>
<%
Recursos recursos = (Recursos) argument;  
TelaAppWrapper tela = (TelaAppWrapper) recursos.getItemCorrente();
Configuracao conf = recursos.getConfiguracao();
%>
import { <%= tela.getEntidade().getNomeParaClasse() %>, <%= tela.getEntidade().getNomeParaClasse() %>Api , LoopBackFilter, Usuario } from '../../shared/sdk';
import { NavParams, NavController } from 'ionic-angular';
import { Storage } from '@ionic/storage';

// Tipo: <%= tela.getTipo() %>
export abstract class <%= tela.getNome() %>Base {

  protected usuario: Usuario;
  
  protected item: <%= tela.getEntidade().getNomeParaClasse() %>;
  
  // filtro com parametro id
  protected abstract filtroLoadId(id:any) : LoopBackFilter;
  // filtro sem parametro id
  protected abstract filtroLoadOne() : LoopBackFilter;
  // chamada caso item nao tenha sido encontrado
  //protected abstract itemNaoEncontrado();
  
  // chamada antes e depois da inicializacao
  protected abstract posInicializaItem();
  protected abstract preInicializaItem();
  
  protected abstract posItemLoad();
  
  
  protected listaLoadOne : <%= tela.getEntidade().getNomeParaClasse() %>[];
  protected itemNaoEncontrado: boolean;
  
 
  constructor(	public navParams: NavParams,
  				public navCtrl: NavController,
				public srv: <%= tela.getEntidade().getNomeParaClasse() %>Api,
				protected storage: Storage) {
  } 
  
	private inicializaItem() {
		this.item = this.navParams.get('item');
		if (!this.item) {
			var id = this.navParams.get('id');
			if (id) {
				console.log('<%= tela.getEntidade().getNomeParaClasse() %>.findById: [' + id + '] , filtroLoadId:' , JSON.stringify(this.filtroLoadId(id)));
				this.srv.findById(id, this.filtroLoadId(id))
					.subscribe(
						(result: <%= tela.getEntidade().getNomeParaClasse() %>) => {
							this.item = result;
							this.posItemLoad();
							console.log('item: ' , this.item)
						},
						(erro: any) => console.log('<%= tela.getNome() %>Base:LoadId(Erro): ' , JSON.stringify(erro))
					)
			} else  {
				console.log('<%= tela.getEntidade().getNomeParaClasse() %>.findOne , filtroLoadOne: ' , JSON.stringify(this.filtroLoadOne()));
				// se nao encontrar vai pro erro -> 404
				this.srv.find(this.filtroLoadOne())
					.subscribe(
						(result: <%= tela.getEntidade().getNomeParaClasse() %>[]) => {
							console.log('Tam Lista Result: ' , result.length);
							if (result.length>0) {
								this.item = result[0];
								this.listaLoadOne = result;
								console.log('item: ' , this.item);
								this.posItemLoad();
								this.itemNaoEncontrado = false;
							} else {
								this.itemNaoEncontrado = true;
							}
								//if (!this.item) this.itemNaoEncontrado();
						},
						(erro: any) => console.log('<%= tela.getNome() %>Base:LoadId(Erro): ' , JSON.stringify(erro))
					)
			}
		} else {
			this.posItemLoad();
		}
	}
	
	carregaUsuario() {
		this.storage.get('user').then((val: Usuario) => {
			this.usuario = val;
			this.preInicializaItem();
			this.inicializaItem();
			this.posInicializaItem();
		})
	}
  
	ionViewWillEnter() {
		console.log('');
		console.log('Tela: <%= tela.getNome() %><<<%= tela.getTipo() %>>> : <%= tela.getEntidade().getNomeParaClasse() %>');
		this.carregaUsuario();
	}
  
	ionViewDidLoad() {
	}
}
    
    